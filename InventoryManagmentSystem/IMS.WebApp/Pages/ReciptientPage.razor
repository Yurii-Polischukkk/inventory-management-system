@page "/recipients"
@using IMS.WebApp
@using IMS.Shared
@using System
@using System.Linq
@using static MudBlazor.CategoryTypes
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime

<h3>INVENTORY</h3>
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Inventory</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="Add" OnInvalidSubmit='()=>snackBar.Add("Provide a name",Severity.Warning)' Model="@recipient">
            <MudTextField @bind-Value="recipient.RecipientName" Label="Department Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Add">Add Inventory</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>

<MudTable RowsPerPage="5" @ref="@_table" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Style="color: white" Elevation="25" Items="GetAll()" Filter="new Func<Recipient, bool>(Search)" @bind-department="recipient">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Tools</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Inventory..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Inventory Id</MudTh>
        <MudTh>Inventory Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.RecipientId</MudTd>
        <MudTd DataLabel="Inventory Name">@context.RecipientName</MudTd>
        <MudTd DataLabel="Actions">
            <MudFab @onclick="@(()=>Update(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination ShowFirstButton="true" ShowLastButton="true" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
    </PagerContent>
</MudTable>


@code {
    private string searchString = "";
    private Tools tools = new Tools();
    private Inventory inventory = new Inventory();
    private List<Inventory> inventories = new List<Inventory>();
    private List<Tools> toolses = new List<Tools>();
    private Recipient recipient = new Recipient();
    private List<Recipient> recipients = new List<Recipient>();

    protected override async Task OnInitializedAsync()
    {
        inventories = inventoryService.GetAll();
        toolses = toolsService.GetAll();
        recipients = recipientService.GetAll();
    }

    private bool Search(Recipient recipient)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (recipient.RecipientName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private List<Recipient> GetAll()
    {
        recipients = recipientService.GetAll();
        return recipients;
    }

    private void Add()
    {
        if (recipient.RecipientId == 0)
        {
            recipientService.Add(recipient);
        }
        else
        {
            recipientService.Update(recipient);
        }
        recipient = new Recipient();
        snackBar.Add("Inventory Added.", Severity.Success);
        GetAll();
    }

    private void Update(Recipient record)
    {
        recipient = record;
        StateHasChanged();
    }

    private async Task Delete(Recipient record)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            recipientService.Delete(record);
            snackBar.Add("Inventory Deleted.", Severity.Success);
            GetAll();
        }
    }

    private MudTable<Recipient> _table;

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

}
